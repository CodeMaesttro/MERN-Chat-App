{"ast":null,"code":"import { create } from 'zustand';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true\n});\nexport const useChatStore = create((set, get) => ({\n  // State\n  messages: [],\n  users: [],\n  selectedUser: null,\n  isUsersLoading: false,\n  isMessagesLoading: false,\n  // Actions\n  getUsers: async () => {\n    set({\n      isUsersLoading: true\n    });\n    try {\n      const res = await api.get('/message/chats');\n      set({\n        users: res.data.data\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      toast.error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to load users');\n    } finally {\n      set({\n        isUsersLoading: false\n      });\n    }\n  },\n  getMessages: async userId => {\n    set({\n      isMessagesLoading: true\n    });\n    try {\n      const res = await api.get(`/message/getmessages/${userId}`);\n      set({\n        messages: res.data.data.messages\n      });\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      toast.error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to load messages');\n    } finally {\n      set({\n        isMessagesLoading: false\n      });\n    }\n  },\n  setSelectedUser: selectedUser => set({\n    selectedUser\n  }),\n  // Socket.io methods (will be implemented later)\n  subscribeToMessages: () => {\n    // Will implement with Socket.io\n  },\n  unsubscribeFromMessages: () => {\n    // Will implement with Socket.io\n  }\n}));","map":{"version":3,"names":["create","axios","toast","api","baseURL","process","env","REACT_APP_API_URL","withCredentials","useChatStore","set","get","messages","users","selectedUser","isUsersLoading","isMessagesLoading","getUsers","res","data","error","_error$response","_error$response$data","response","message","getMessages","userId","_error$response2","_error$response2$data","setSelectedUser","subscribeToMessages","unsubscribeFromMessages"],"sources":["C:/Users/HOSTERSHUB/Desktop/mern-chatApp/chat-frontend/src/store/useChatStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport axios from 'axios';\nimport toast from 'react-hot-toast';\n\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  withCredentials: true,\n});\n\nexport const useChatStore = create((set, get) => ({\n  // State\n  messages: [],\n  users: [],\n  selectedUser: null,\n  isUsersLoading: false,\n  isMessagesLoading: false,\n\n  // Actions\n  getUsers: async () => {\n    set({ isUsersLoading: true });\n    try {\n      const res = await api.get('/message/chats');\n      set({ users: res.data.data });\n    } catch (error) {\n      toast.error(error.response?.data?.message || 'Failed to load users');\n    } finally {\n      set({ isUsersLoading: false });\n    }\n  },\n\n  getMessages: async (userId) => {\n    set({ isMessagesLoading: true });\n    try {\n      const res = await api.get(`/message/getmessages/${userId}`);\n      set({ messages: res.data.data.messages });\n    } catch (error) {\n      toast.error(error.response?.data?.message || 'Failed to load messages');\n    } finally {\n      set({ isMessagesLoading: false });\n    }\n  },\n\n\n\n  setSelectedUser: (selectedUser) => set({ selectedUser }),\n\n  // Socket.io methods (will be implemented later)\n  subscribeToMessages: () => {\n    // Will implement with Socket.io\n  },\n\n  unsubscribeFromMessages: () => {\n    // Will implement with Socket.io\n  },\n}));"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,iBAAiB;AAEnC,MAAMC,GAAG,GAAGF,KAAK,CAACD,MAAM,CAAC;EACvBI,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtCC,eAAe,EAAE;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGT,MAAM,CAAC,CAACU,GAAG,EAAEC,GAAG,MAAM;EAChD;EACAC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,YAAY,EAAE,IAAI;EAClBC,cAAc,EAAE,KAAK;EACrBC,iBAAiB,EAAE,KAAK;EAExB;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpBP,GAAG,CAAC;MAAEK,cAAc,EAAE;IAAK,CAAC,CAAC;IAC7B,IAAI;MACF,MAAMG,GAAG,GAAG,MAAMf,GAAG,CAACQ,GAAG,CAAC,gBAAgB,CAAC;MAC3CD,GAAG,CAAC;QAAEG,KAAK,EAAEK,GAAG,CAACC,IAAI,CAACA;MAAK,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdpB,KAAK,CAACkB,KAAK,CAAC,EAAAC,eAAA,GAAAD,KAAK,CAACG,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,sBAAsB,CAAC;IACtE,CAAC,SAAS;MACRd,GAAG,CAAC;QAAEK,cAAc,EAAE;MAAM,CAAC,CAAC;IAChC;EACF,CAAC;EAEDU,WAAW,EAAE,MAAOC,MAAM,IAAK;IAC7BhB,GAAG,CAAC;MAAEM,iBAAiB,EAAE;IAAK,CAAC,CAAC;IAChC,IAAI;MACF,MAAME,GAAG,GAAG,MAAMf,GAAG,CAACQ,GAAG,CAAC,wBAAwBe,MAAM,EAAE,CAAC;MAC3DhB,GAAG,CAAC;QAAEE,QAAQ,EAAEM,GAAG,CAACC,IAAI,CAACA,IAAI,CAACP;MAAS,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOQ,KAAK,EAAE;MAAA,IAAAO,gBAAA,EAAAC,qBAAA;MACd1B,KAAK,CAACkB,KAAK,CAAC,EAAAO,gBAAA,GAAAP,KAAK,CAACG,QAAQ,cAAAI,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,yBAAyB,CAAC;IACzE,CAAC,SAAS;MACRd,GAAG,CAAC;QAAEM,iBAAiB,EAAE;MAAM,CAAC,CAAC;IACnC;EACF,CAAC;EAIDa,eAAe,EAAGf,YAAY,IAAKJ,GAAG,CAAC;IAAEI;EAAa,CAAC,CAAC;EAExD;EACAgB,mBAAmB,EAAEA,CAAA,KAAM;IACzB;EAAA,CACD;EAEDC,uBAAuB,EAAEA,CAAA,KAAM;IAC7B;EAAA;AAEJ,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}